# Знакомство с языком Python (лекции)
# Урок 3. Функции, рекурсия, алгоритмы
# https://gb.ru/lessons/391149


""" Функции """
"""
Функция — это фрагмент программы, используемый многократно.
Мы знакомы уже с функциями в C#, давайте теперь посмотрим, как
создаются и используются функции внутри Python 
P.S. 
В Python не выделяются функции и процедуры, как 
самостоятельные единицы, они объединены в одно понятие "функция".
"""
# def function_name(x):
#     body line 1
#     ...
#     body line n
#     optional return


""" Задача """
"""
Необходимо создать функцию sumNumbers(n), которая будет
считать сумму всех элементов от 1 до n.

Очень важно понимать одну вещь, 
сколько аргументов мы передаем, столько и принимаем. 
Или наоборот сколько аргументов мы принимаем, столько и передаем.
В нашем случае функция sumNumbers принимает 1 аргумент(n).

Решение:
"""
# n = 5   # передача значения переменной 'n'
#         # передать значение переменной можно при вызове функции (см. ниже)
# def sum_numbers(n, y = 'Hello'): # параметр 'def' сообщает Python, что задана функция
#     print(y)
#                     # с именем 'sum_numbers'
#                     # в Python определение типа переменных динамичное,
#                     # указывать тип переменной не нужно                  
#     summa = 0 # создание переменной 'summa',
#               # с указанием текущего значения равного нулю
#     for i in range(1, n+1): # цикл перебора чисел в промежутке от 1 до n+1
#         summa += i # увеличение значения переменной (summa) на значение индекса (i)
#     # print(summa) # вывод результата суммирования
#     return summa # возврат (return) суммы, вместо её вывода (print)
#                  # при появлении оператора 'return', программа завершает работу
# a = sum_numbers(n, 'qwert')  # создание переменной 'a' 
#                     # и передача ей значения функции 'sum_numbers(n)'
# print(a) # вывод значения переменной 'a'
# print(sum_numbers(n))   # вывывод (print) функции одновременно с её вызовом (sum_numbers)
#                         # и указанием либо конкретного значения переменной 'n', например, (5)
#                         # либо символа переменной (n) в скобках,
#                         # если её значение было задано вначале (n = 5)


# 00:07:30

""" Функция принимающая любое кодичество аргументов"""

def sum_str(*a): # Что делает эта функция?
                 # Какой в ней практический смысл?
                 # Где и для чего её можно применить?
    res = ''
    for i in a:
        res += i
    return res
print(sum_str('q','e','l'))
print(sum_str('q','e','l','r','f'))
# print(sum_str(a, s, d, f)) # передача открытых, не заковыченных знаков, выдаст ошибку
# print(sum_str(1, 3, 4)) # аналогично, передача открытых числовых значений, тоже выдаст ошибку
print(sum_str('1', '3', '4'))   # передача чисел в кавычках допустима,
                                # ошибки не возникает