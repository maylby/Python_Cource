# Знакомство с языком Python (лекции)
# Урок 1. Знакомство с языком программирования Python
# https://gb.ru/lessons/391147

# [00:09:05] Типы данных на Python

''' комментирование с помощю апострофа '''
""" или двойных кавычек 
(три перед коментируемыми строками)
п = 5 <- <class 'int'> (тип данных "целое число")
n = 1.45 <- <class 'float'> (тип данных "дробь")
print(n)
n = 'erty' <- строка обрамляется апострофами или двойными кавычками
(три после комментируемых строк)
"""
# n1 = "<class 'str'> (тип данных: строка)" # выделяется в коде апострофом или кавычками
# print(n1) 

# print(n) # комментирование значком "#" (прямое нажатие кнопки)
# m = 1.45 # "Ctrl+/" закрывает значком "#" одну или несколько выделенных строк одновременно
# print(type(m)) # определение типа данных


# # [00:14:16] Интерполяция

# a = 5
# b = 1.23
# c = 'hello'

# print(a, b, c) # одновременный вывод переменных с разным типом данных
# print(a,'-', b,'-', c) # вывод через дефис
# print(f"{a} - {b} - {c}") # вывод с помощью шаблона "f-строки"
# print("{} - {} - {}" .format(a,b,c)) # вывод с помощью шаблона ".format()"


# [00:17:10]
# Ввод данных

# print('Input first number') # Приглашение ко вводу данных
# # При использовании "print" для строки приглашения ко вводу,
# # последующий ввод осуществляется под строкой приглашения
# a = input() # ввод строки
# a = int(input()) # ввод числа 
# # "a" - переменная, принимающая значение, введённое в "input()"
# # print(a) # вывод на экран значения переменной "a"
# b = input("Input second number: ") # в этом случае, приглашение и данные выводятся в одну строку
# a = 2 # прямой ввод данных (число)
# b = 2
# print(a,'+',b, '=', a + b) # сложения чисел не происходит, если переменная введена в "input()"
# print(f'{a} + {b} = {a + b}') # для сложения чисел, а не строк, ввод делается в "int(input())"

# # [00:21:02] 
# # Приведение типов

# c = 4.23
# print(c)
# print(type(c)) # <class 'float'> (тип данных: "дробь")

# c = int(c)
# print(c)
# print(type(c)) # <class 'int'> (тип данных: "целое число") -> убирает дробную часть числа

# c = str(c)
# print(c + '2') # <class 'str'> (тип данных: "строка") -> 4 и 2 -> 42
# # тип 'str' допускает добавление новых записей, которые строка складывает вместе
# print(type(c))

# c = bool(c) # <class 'bool'> (логический тип данных) -> "True" (верно), "Falce" (ложно)
# print(c)
# print(type(c)) 


# print('Input first number')
# a = int(input())
# b = int(input("Input second number: "))
# print(a,'+',b, '=', a + b)


# Символы арифметических операций по приоритету выполнения

"""
1. Возведение в степень (**)
2. Умножение (*)
3. Деление (/) вещественных чисел, дробей
4. Деление (//) целых чисел
5. Остаток от деления (%)
6. Сложение (+)
7. Вычитание (-)
"""


# # [00:26:00]
# # Округление чисел

# a = 3.21111
# b = 2.11111
# print(round(a*b, 3)) # "round" - оператор округления
""" первая переменная в скобках - число, которое надо округлить
вторая переменная - это количество знаков после запятой
"""


# [00:27:40]
# Сокращённые записи

# iter = 2
# iter += 2 # iter = iter + 2
# iter -= 2 # iter = iter - 2
# iter *= 2 # iter = iter * 2
# iter /= 2 # iter = iter / 2
# iter //= 2 # iter = iter // 2
# iter %= 2 # iter = iter % 2
# iter **= 2 # iter = iter ** 2


# [00:27:40]
# Символы логических операций
'''
> (Больше)
>= (Больше или равно)
< (Меньше)
<= (Меньше или равно)
== (Равенство чисел (сравнение))
!= (Не равно)
not ("Не" (отрицание))
and ("И" (конъюнкция))
or ("Или" (дезъюнкция))
'''

# Примеры логических операций

# a = 1 > 4
# print(a)

# a = 1 < 4 and 5 > 2
# print(a)

# a = 1 == 2
# print(a)

# a = 1 != 2
# print(a)

# a = 'qwe'
# b = 'qwe'
# print(a == b)

# a = 1 < 3 < 5 < 10
# print(a)


# [00:30:26] 
# Управляющие конструкции if, if-else

'''Отступы в Python'''
"""
Отступы в Python играют огромную роль, стоит Вам поставить на 1
пробел меньше, чем нужно, Ваша программа будет не рабочая.
Отступом отделяется блок кода, который находится внутри
операторов ветвления, циклов, функций и тд. Обычно внутри VSC
отступы ставятся автоматически, но Вы должны знать чему равны
отступы:
    ● Кнопка TAB
    или
    ● 4 пробела
Но необязательно это кнопка TAB или 4 пробела, можно настроить
чему равен отступ, как Вам больше нравится, мы же будем
использовать вариант, который описан Выше.
"""

'''
Пример оформления программного кода с операторами ветвления:
'''
# if condition:
    # operator 1
    # operator 2
    # ...
    # operator n
# else:
    # operator n + 1
    # operator n + 2
    # ...
    # operator n + m


''' Ещё один вариант использования операторов ''' 
# else-if → 
''' в связке с''' 
# elif (else if)

''' Проверяем первое условие, если оно не выполняется, проверяем
второе и так далее. Как только будет найдено верное условие, все
остальные будут игнорироваться.'''

# if condition1:
    # operator
# elif condition2:
    # operator
# elif condition3:
    # operator
# else:
    # operator

'''Пример'''

# username = input('Введите имя: ')
# if username == 'Маша':
#     print('Ура, это же Маша!')
# elif username == 'Марина':
#     print('Я так ждал тебя, Марина!')
# elif username == 'Ильнар':
#     print('Ильнар - топ!')
# else:
#     print('Привет,', username)


''' Сложные условия '''

''' Сложные условия создаются с помощью логических операторов, 
таких как: and, or, not
'''
# if condition1 and condition2: # выполнится, когда оба условия окажутся верными
    # operator
# if condition3 or condition4: # выполнится, когда хотя бы одно из условий окажется верным
    # operator


# [00:35:00] 
# Управляющие конструкции: while и вариация while-else

''' Цикл While '''
''' Цикл позволяет выполнить блок кода, пока условие является верным.'''

# while condition:
    # operator 1
     # operator 2
        # ...
        # operator n

''' Пример '''

# n = 423
# print(n)
# summa = 0
# while n > 0:
#     x = n % 10
#     summa = summa + x 
#     n = n // 10
# print(summa) 
# # 9


''' Управляющие конструкции: while-else '''

# while condition:
    # operator 1
    # operator 2
    # ...
    # operator n
# else:
    # operator n + 1
    # operator n + 2
    # ...
    # operator n + m

'''
Блок "else" выполняется, когда 
основное тело цикла перестает работать самостоятельно. 
А разве кто-то может прекратить работу цикла? 
Если мы вспомним C#, то да и это конструкция "break".
'''

''' Пример '''

# i = 0
# while i < 5: 
#     if i == 3: # при "i > 3", выводится "3" 
#         break # данный оператор использовать не желательно 
#     i = i + 1 # цикл || "i += 1" (более короткая запись цикла)
#     """ Можно ли записать ещё короче? """
# else:
#     print('Пожалуй') # при "i < 3", выполняется условие "else" 
#     print('хватит')
# print(i)


## [00:35:00] 
''' Метод флажка, вместо "break" '''
''' Программа поиска минимального делителя числа'''

# n = int(input())
# flag = True
# i = 2
# while flag:
#     if n % i == 0: # "n" кратно "i"
#         flag = False
#         print(i) # выводим "i", т.к. текущее значение "i" - это минимальный делитель числа "n"
#     elif i > n // 2: # значение делителя ("i") больше половины делимого ("n")
#         print(n) # выводим значение "n", 
#         # если, не выполнено первое условие "n" кратно "i" после перебора всех значений "i",
#         # либо "i" больше половины "n", т.е., "n" не делится нацело на "i"
#         flag = False
#     i += 1 # переход к следующему значению "i"


## [00:38:13] 
''' Цикл for, функция range() '''

'''
В Python цикл for в основном используется для перебора значений
Пример использования цикла for:
'''

# for i in enumeration:
    # operator 1
    # operator 2
    # ...
    # operator n

# for i in 1, -2, 3, 14, 5:
#     print(i)
''' 1 -2 3 15 5 ''' # последовательный вывод на экран значений переменной "i"


''' Цикл for, функция range() '''
'''
    ● Range выдает значения из диапазона с шагом 1.
    ● Если указано только одно число — от 0 до заданного числа.
    ● Если нужен другой шаг, третьим аргументов можно задать приращение.
'''
# r = range(5) # 0 1 2 3 4 (числа от 0 до 4, т.к. указано одно число ("5"), шаг = 1, по умолчанию)  
# r = range(2, 5) # 2 3 4 (промежуток от 2 до 5, шаг, по умолчанию, равен 1, число 5 исключается)
# r = range(-5, 0) # -5 -4 -3 -2 -1 (вывод чисел от -5 до нуля, исключая последнее)
# r = range(0, -5) # ---- (вывод отсутствует, т.к. шаг по умолчанию равен +1)
# r = range(1, 10, 2) # 1 3 5 7 (третье число в скобках задаёт шаг)
# r = range(100, 0, -20) # 100 80 60 40 20 (числа от 100 до нуля, исключая ноль, с шагом -20)
# r = range(100, -100, -20) # 100 80 60 40 20 0 -20 -40 -60 -80
# for i in r:
#     print(i)


# [00:40:50]
''' Можно использовать цикл for() и со строками, 
так как у строк есть нумерация, такая же как и
у массивов, начинается с 0:
'''
# for i in 'qwerty':
#     print(i)
#  # q
#  # w
#  # e
#  # r
#  # t
#  # y


# [00:42:10]

''' Можно использовать вложенные циклы:
'''
# line = ""
# for i in range(5):
#     line = ""
#     for j in range(5):
#         line += "*"
#     print(line)

''' Программный код выведет 5 строк “******”. Сначала запускается внешний цикл с i(счетчик
цикла). После этого запускается внутренний цикл с j(счетчик цикла). После того как
внутренний цикл завершил свою работу, переменная line = “*****” и выводится на экран,
далее опять повторяется внешний цикл и так 5 раз.
'''


# [00:42:10]

''' Немного о строках '''
'''
Возникают ситуации, когда в некоторых задачах необходимо поработать со строкой,
которую ввел пользователь. Например: необходимо сделать все буквы маленькими, или
поменять все буквы “ё” на “е”.
'''
# text = 'СъЕШЬ ещё этих МяГкИх французских булок'
# print(len(text)) # 39 (функция "len" позволяет узнать длину строки, количество символов)
# print('ещё' in text) # True (поиск заданного слова в строке)
# print(text.lower()) # съешь ещё этих мягких французских булок (перевод символов в нижний регистр)
# print(text.upper()) # СЪЕШЬ ЕЩЁ ЭТИХ МЯГКИХ ФРАНЦУЗСКИХ БУЛОК (перевод символов в верхний регистр)
# print(text.replace('ещё','ЕЩЁ')) # СъЕШЬ ЕЩЁ этих МяГкИх французских булок (замена слов)



# [00:45:04] 

''' Срезы '''
'''
    ● Мы представляем строку в виде массива символов. 
    Значит мы можем обращаться к элементам по индексам.
    ● Отрицательное число в индексе — счёт с конца строки
'''

# text = 'съешь ещё этих мягких французских булок'
# print(text[0]) # c (1-й символ)
# print(text[1]) # ъ (2-й символ)
# print(text[:1]) # с (1-й символ)
# print(text[:2]) # съ (два первых символа)
# print(text[len(text)-1]) # к (последний символ)
# print(text[len(text)-2]) # о (предпоследний символ)
# print(text[len(text)-2:]) # ок (2 последних символа)
# print(text[-2:]) # ок (2 последних символа /краткая запись/)
# print(text[-5]) # б (5-й символ с конца)
# print(text[-5:]) # булок (5 символов с конца)
# print(text[-4-1:]) # булок (5 символов с конца)
# print(text[-17:-10:]) # француз
# print(text[6:-18]) # ещё этих мягких
# print(text[2:9]) # ешь ещё
# print(text[0:len(text):6]) # сеикакл (каждый 6-й элемент)
# print(text[::6]) # сеикакл (вывод каждого 6-го элемента /краткая запись/)
# print(text[:]) # съешь ещё этих мягких французских булок (вывод всех символов)
# text = text[2:9] + text[-6:-4:] + text[-6] + text[:2]
# print(text) # ешь ещё б съ
# print()